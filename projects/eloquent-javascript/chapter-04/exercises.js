////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step) {
  let tempArray = [];
  if (step === undefined) {
    step = 1;
  }
  if (start === end) {
    return [];
  }
  if (start > end && step < 0) {
    for (let i = start; i >= end; i += step) {
      tempArray.push(i);
    }
  } else if (start < end && step > 0) {
    for (let i = start; i <= end; i += step) {
      tempArray.push(i);
    }
  }
  return tempArray;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  let tempNum = 0;
  for (let i = 0; i < array.length; i++) {
    tempNum += array[i];
  }
  return tempNum;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(given) {
  let tempArray = [];
  for (let i = given.length - 1; i >= 0; i--) {
    tempArray.push(given[i]);
  }
  return tempArray;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(given) {
  let count = 0;
  for (let i = given.length - 1; i >= Math.ceil(given.length / 2); i--) {
    let movePiece = given[count];
    given[count] = given[i];
    given[i] = movePiece;
    count++;
  }
  return given;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(given) {
  let list;
  for (let i = given.length - 1; i >= 0; i--) {
    if (i !== given.length - 1) {
      list = {value: given[i], rest: list};
    } else {
      list = {value: given[i], rest: null};
    }
  }
  return list;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
  let tempArray = [];
  for (let current = list; current; current = current.rest) {
    tempArray.push(current.value);
  }
  return tempArray;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, list) {
  return {value: value, rest: list};
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, num) {
  let count = 0;
  for (let current = list; current; current = current.rest) {
    if (count !== num) {
      count++;
    } else {
      return current.value;
    }
  }
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(valueOne, valueTwo) {
  if (typeof(valueOne) === 'object' && valueOne !== null) {
    if (typeof(valueTwo) === 'object' && valueTwo !== null) {
      let keysOne = Object.keys(valueOne);
      let keysTwo = Object.keys(valueTwo);
      if (keysOne.length !== keysTwo.length) {
        return false;
      }
      for (let i = 0; i < keysOne.length; i++) {
        if (keysOne[i] !== keysTwo[i]) {
          return false;
        }
        if (typeof(valueOne[keysOne[i]]) === 'object' && valueOne[keysOne[i]] !== null) {
          if (typeof(valueTwo[keysTwo[i]]) === 'object' && valueTwo[keysTwo[i]] !== null) {
            return deepEqual(valueOne[keysOne[i]], valueTwo[keysOne[i]]);
          } else {
            return false;
          }
        } else if (valueOne[keysOne[i]] !== valueTwo[keysTwo[i]]) {
          return false;
        }
      }
      return true;
    } else {
      return false;
    }
  } else {
    return valueOne === valueTwo;
  }
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
